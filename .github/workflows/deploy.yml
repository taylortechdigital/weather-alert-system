name: Deploy Infrastructure and Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint & Validate Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6'
      
      - name: Terraform FMT Check
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        run: terraform validate
        continue-on-error: true

      - name: Install TFLint
        run: |
          curl -L https://github.com/terraform-linters/tflint/releases/latest/download/tflint_linux_amd64.zip -o tflint.zip
          unzip tflint.zip
          chmod +x tflint
          sudo mv tflint /usr/local/bin/
        continue-on-error: true

      - name: Run TFLint
        run: |
          tflint --init
          tflint --config "${GITHUB_WORKSPACE}/terraform/.tflint.hcl"
        continue-on-error: true

      - name: Install Checkov
        run: pip install checkov
        continue-on-error: true

      - name: Run Checkov
        run: checkov -d .
        continue-on-error: true

      - name: Install yamllint
        run: |
          sudo apt-get update && sudo apt-get install -y yamllint
        continue-on-error: true

      - name: Run yamllint
        run: |
          if [ -f "${GITHUB_WORKSPACE}/terraform/.yamllint.yml" ]; then
            yamllint "${GITHUB_WORKSPACE}/terraform/.yamllint.yml"
          else
            echo "No .yamllint.yml file; skipping yamllint."
          fi
        continue-on-error: true

  plan:
    name: Terraform Plan & PR Comment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6'
      
      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Save Terraform Plan Output
        run: terraform show -no-color tfplan > plan-output.txt

      - name: Authenticate GitHub CLI
        if: github.event_name == 'pull_request'
        run: echo "$GITHUB_TOKEN" | gh auth login --with-token

      - name: Post Terraform Plan to PR
        if: github.event_name == 'pull_request'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "$(cat plan-output.txt)"

  test_infra:
    name: Run Terraform Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    needs: plan
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6'
      
      - name: Enable Terraform Tests
        run: echo 'experimental { tests = true }' > ~/.terraformrc

      - name: Terraform Test
        run: terraform test

  build:
    name: Build & Push Docker Images to AWS ECR
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    defaults:
      run:
        working-directory: .
    needs: test_infra
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Backend Image
        run: |
          cd backend
          docker build -t weather-alerts-backend -f Dockerfile .
          cd ..
      
      - name: Tag and Push Backend Image to ECR
        run: |
          docker tag weather-alerts-backend ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/weather-alerts-backend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/weather-alerts-backend:latest

      - name: Build Frontend Image
        run: |
          cd frontend
          docker build -t weather-alerts-frontend -f Dockerfile .
          cd ..
      
      - name: Tag and Push Frontend Image to ECR
        run: |
          docker tag weather-alerts-frontend ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/weather-alerts-frontend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/weather-alerts-frontend:latest

  deploy:
    name: Deploy with Terraform & Helm
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    needs: build
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6'

      - name: Terraform Init & Apply
        run: terraform init && terraform apply -auto-approve

      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy Helm Chart
        run: |
          helm upgrade --install weather-alerts ../helm \
            --set backend.image=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/weather-alerts-backend \
            --set frontend.image=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/weather-alerts-frontend

  monitoring:
    name: Deploy Monitoring Resources
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    needs: deploy
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6'

      - name: Apply Monitoring Resources
        run: terraform apply -auto-approve -target=kubernetes_namespace.monitoring -target=helm_release.prometheus -target=helm_release.grafana
