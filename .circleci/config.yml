version: 2.1

orbs:
  terraform: circleci/terraform@3.5.1
  helm: circleci/helm@3.1.0
  aws-ecr: circleci/aws-ecr@9.3.7
  aws-cli: circleci/aws-cli@5.2.0

executors:
  default-base:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
  default-docker:
    docker:
      - image: cimg/docker:stable
    working_directory: ~/project

jobs:
  lint:
    executor: default-base
    working_directory: ~/project/terraform
    steps:
      - checkout
      - run:
          name: Terraform fmt check
          command: terraform fmt -check
      - run:
          name: Run TFLint
          command: |
            tflint --init
            tflint --config .tflint.hcl
      - run:
          name: Run Checkov
          command: checkov -d .
      - run:
          name: Run yamllint
          command: |
            if [ -f ../../.yamllint.yml ]; then
              yamllint ../../.yamllint.yml
            else
              echo "No .yamllint.yml file; skipping yamllint."
            fi

  plan:
    executor: default-base
    working_directory: ~/project/terraform
    steps:
      - checkout
      - terraform/init:
          path: .
      - terraform/validate:
          path: .
      - terraform/plan:
          path: .
          extra_args: ["-out=tfplan"]
      - run:
          name: Show Terraform Plan
          command: terraform show -no-color tfplan > plan-output.txt
      - run:
          name: Authenticate GitHub CLI
          command: echo "$GITHUB_TOKEN" | gh auth login --with-token
      - run:
          name: Post Terraform Plan to PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              gh pr comment --repo $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME --body "$(cat plan-output.txt)"
            else
              echo "Not a PR build; skipping PR comment."
            fi

  build:
    executor: default-docker
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker
      - aws-ecr/login:
          aws-region: "$AWS_REGION"
          account-url: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
      - run:
          name: Build Backend Image
          command: |
            cd backend
            docker build -t weather-alerts-backend -f Dockerfile .
            cd ..
      - run:
          name: Tag and Push Backend Image to ECR
          command: |
            docker tag weather-alerts-backend $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/weather-alerts-backend:latest
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/weather-alerts-backend:latest
      - run:
          name: Build Frontend Image
          command: |
            cd frontend
            docker build -t weather-alerts-frontend -f Dockerfile .
            cd ..
      - run:
          name: Tag and Push Frontend Image to ECR
          command: |
            docker tag weather-alerts-frontend $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/weather-alerts-frontend:latest
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/weather-alerts-frontend:latest

  deploy:
    executor: default-base
    working_directory: ~/project/terraform
    steps:
      - checkout
      - terraform/init:
          path: .
      - terraform/apply:
          path: .
          auto-approve: true
      - helm/install:
          chart: ../helm
          release: weather-alerts
          set:
            backend.image: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/weather-alerts-backend"
            frontend.image: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/weather-alerts-frontend"

  monitoring:
    executor: default-base
    working_directory: ~/project/terraform
    steps:
      - checkout
      - terraform/init:
          path: .
      - terraform/apply:
          path: .
          auto-approve: true
          targets:
            - kubernetes_namespace.monitoring
            - helm_release.prometheus
            - helm_release.grafana

workflows:
  version: 2
  deploy:
    jobs:
      - lint
      - plan
      - build
      - deploy
      - monitoring
